<?php

namespace MohamadRZ\EssentialsZ;

use MohamadRZ\EssentialsZ\commands\BreakCommand;
use MohamadRZ\EssentialsZ\commands\FlyCommand;
use MohamadRZ\EssentialsZ\commands\GMACommand;
use MohamadRZ\EssentialsZ\commands\GMCCommand;
use MohamadRZ\EssentialsZ\commands\GMSCommand;
use MohamadRZ\EssentialsZ\commands\GMVCommand;
use MohamadRZ\EssentialsZ\commands\GodCommand;
use MohamadRZ\EssentialsZ\commands\NickCommand;
use MohamadRZ\EssentialsZ\commands\RealNameCommand;
use MohamadRZ\EssentialsZ\commands\SizeCommand;
use MohamadRZ\EssentialsZ\commands\SpiderCommand;
use MohamadRZ\EssentialsZ\settings\Settings;
use MohamadRZ\EssentialsZ\user\UserManager;
use pocketmine\command\Command;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\Config;
use pocketmine\utils\TextFormat;

class EssentialsZPlugin extends PluginBase
{

    private static EssentialsZPlugin $instance;
    private UserManager $userManager;
    private Settings $settings;
    private Warp $warp;

    public function getWarp(): Warp
    {
        return $this->warp;
    }

    protected function onLoad(): void
    {
        self::$instance = $this;
        parent::onLoad(); // TODO: Change the autogenerated stub
    }

    protected function onEnable(): void
    {
        $this->userManager = new UserManager($this);
        $this->settings = new Settings();
        $this->warp = new Warp();

        $config = new Config($this->getDataFolder() . "config.yml", Config::YAML);
        $commands = $config->get("commands", []);

        parent::onEnable(); // TODO: Change the autogenerated stub

        foreach ($commands as $commandName) {
            switch ($commandName) {
                case "nick":
                        $this->getServer()->getCommandMap()->register("nick", new NickCommand($this));
                    break;
                case "realname":
                        $this->getServer()->getCommandMap()->register("realname", new RealNameCommand($this));
                    break;
                case "size":
                        $this->getServer()->getCommandMap()->register("size", new SizeCommand($this));
                    break;
/*                case "gmv":
                        $this->getServer()->getCommandMap()->register("gmv", new GMVCommand($this));
                    break;
                case "gms":
                        $this->getServer()->getCommandMap()->register("gms", new GMSCommand($this));
                    break;
                case "gmc":
                        $this->getServer()->getCommandMap()->register("gmc", new GMCCommand($this));
                    break;
                case "gma":
                        $this->getServer()->getCommandMap()->register("gma", new GMACommand($this));
                    break;*/
                case "god":
                    $this->getServer()->getCommandMap()->register("god", new GodCommand($this));
                    break;
                case "fly":
                    $this->getServer()->getCommandMap()->register("fly", new FlyCommand($this));
                    break;
                case "spider":
                    $this->getServer()->getCommandMap()->register("spider", new SpiderCommand($this));
                    break;
                default:
                    $this->getLogger()->warning("Unknown command in config: $commandName");
                    break;
            }
        }
        $this->getServer()->getCommandMap()->register("break", new BreakCommand($this));
        $this->getServer()->getPluginManager()->registerEvents(new PlayerListener($this), $this);
    }

    public static function getInstance(): EssentialsZPlugin
    {
        return self::$instance;
    }

    public function getUserManager(): UserManager
    {
        return $this->userManager;
    }

    public function getSettings(): Settings
    {
        return $this->settings;
    }
}